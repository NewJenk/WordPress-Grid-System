import { __ } from '@wordpress/i18n';
import { useBlockProps, InspectorControls } from '@wordpress/block-editor';
import {
	PanelBody,
	RangeControl,
	BaseControl,
	Button,
	Flex,
	FlexItem,
} from '@wordpress/components';
import { undo } from '@wordpress/icons';

// Import the utility function
import { getSpacerClasses } from './utils';

// Define translatable labels
const responsiveSizeNames = {
	all: __( 'Extra Small Viewports', 'grid-system' ),
	sm: __( 'Small Viewports', 'grid-system' ),
	md: __( 'Medium Viewports', 'grid-system' ),
	lg: __( 'Large Viewports', 'grid-system' ),
	xl: __( 'Extra Large Viewports', 'grid-system' ),
};

// Define breakpoint help text
const breakpointHelpText = {
	all: __( 'Will apply from 0px to 575px', 'grid-system' ),
	sm: __( 'Will apply from 576px to 767px', 'grid-system' ),
	md: __( 'Will apply from 768px to 991px', 'grid-system' ),
	lg: __( 'Will apply from 992px to 1199px', 'grid-system' ),
	xl: __( 'Will apply from 1200px and up', 'grid-system' ),
};

/**
 * Re-usable component for the Reset button.
 */
const ResetButton = ( { onReset, attribute } ) => (
	<Button
		style={{ marginTop: '10px' }}
		icon={ undo }
		label={ __( 'Reset Height', 'grid-system' ) }
		onClick={ onReset }
		isSmall
		isLink
		isDestructive
		disabled={ attribute === undefined } // Disable if already reset
		className="grid-system-reset-button"
	/>
);

/**
 * The edit function
 */
export default function Edit( { attributes, setAttributes } ) {
	const {
		paddingBottomXs,
		paddingBottomSm,
		paddingBottomMd,
		paddingBottomLg,
		paddingBottomXl,
	} = attributes;

	// --- Smart Inheritance Logic ---
	const effPaddingXs = paddingBottomXs; // Base value
	const effPaddingSm = paddingBottomSm ?? effPaddingXs;
	const effPaddingMd = paddingBottomMd ?? effPaddingSm;
	const effPaddingLg = paddingBottomLg ?? effPaddingMd;
	const effPaddingXl = paddingBottomXl ?? effPaddingLg;
	// --- End Smart Inheritance Logic ---

	// Apply the spacer classes generated by utils.js to the block wrapper
	const blockProps = useBlockProps( {
		className: getSpacerClasses( attributes ),
		'aria-hidden': 'true', // Presentational
	} );

	// The editor preview now uses the classes for visual feedback.
	// NOTE: Your editor environment must load the CSS for p-*, p-sm-*, etc.
	// for the height to visually change in the editor.
	return (
		<>
			<InspectorControls>
				<PanelBody title={ responsiveSizeNames.all }>
					<BaseControl help={ breakpointHelpText.all } />
					<RangeControl
						label={ __( 'Height', 'grid-system' ) }
						value={ effPaddingXs }
						onChange={ ( value ) =>
							setAttributes( { paddingBottomXs: value } )
						}
						min={ 0 }
						max={ 20 }
						step={ 1 }
					/>
				</PanelBody>

				<PanelBody title={ responsiveSizeNames.sm }>
					<BaseControl help={ breakpointHelpText.sm } />
					<Flex>
						<FlexItem isBlock>
							<RangeControl
								label={ __( 'Height', 'grid-system' ) }
								value={ effPaddingSm }
								onChange={ ( value ) =>
									setAttributes( { paddingBottomSm: value } )
								}
								min={ 0 }
								max={ 20 }
								step={ 1 }
							/>
						</FlexItem>
						<ResetButton
							attribute={ paddingBottomSm }
							onReset={ () =>
								setAttributes( { paddingBottomSm: undefined } )
							}
						/>
					</Flex>
				</PanelBody>

				<PanelBody title={ responsiveSizeNames.md }>
					<BaseControl help={ breakpointHelpText.md } />
					<Flex>
						<FlexItem isBlock>
							<RangeControl
								label={ __( 'Height', 'grid-system' ) }
								value={ effPaddingMd }
								onChange={ ( value ) =>
									setAttributes( { paddingBottomMd: value } )
								}
								min={ 0 }
								max={ 20 }
								step={ 1 }
							/>
						</FlexItem>
						<ResetButton
							attribute={ paddingBottomMd }
							onReset={ () =>
								setAttributes( { paddingBottomMd: undefined } )
							}
						/>
					</Flex>
				</PanelBody>

				<PanelBody title={ responsiveSizeNames.lg }>
					<BaseControl help={ breakpointHelpText.lg } />
					<Flex>
						<FlexItem isBlock>
							<RangeControl
								label={ __( 'Height', 'grid-system' ) }
								value={ effPaddingLg }
								onChange={ ( value ) =>
									setAttributes( { paddingBottomLg: value } )
								}
								min={ 0 }
								max={ 20 }
								step={ 1 }
							/>
						</FlexItem>
						<ResetButton
							attribute={ paddingBottomLg }
							onReset={ () =>
								setAttributes( { paddingBottomLg: undefined } )
							}
						/>
					</Flex>
				</PanelBody>

				<PanelBody title={ responsiveSizeNames.xl }>
					<BaseControl help={ breakpointHelpText.xl } />
					<Flex>
						<FlexItem isBlock>
							<RangeControl
								label={ __( 'Height', 'grid-system' ) }
								value={ effPaddingXl }
								onChange={ ( value ) =>
									setAttributes( { paddingBottomXl: value } )
								}
								min={ 0 }
								max={ 20 }
								step={ 1 }
							/>
						</FlexItem>
						<ResetButton
							attribute={ paddingBottomXl }
							onReset={ () =>
								setAttributes( { paddingBottomXl: undefined } )
							}
						/>
					</Flex>
				</PanelBody>
			</InspectorControls>

			{ /* Editor preview */ }
			<div { ...blockProps }></div>
		</>
	);
}